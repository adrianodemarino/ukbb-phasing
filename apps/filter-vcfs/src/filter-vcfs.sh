#!/bin/bash
# filter-vcfs 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

  echo "filter-vcfs started on $(date)"

  echo "Value of in_vcf:       '${in_vcf[@]}'"
  echo "Value of filter:       '$filter'"
  echo "Value of header:       '$header'"
  echo "Value of out_filename: '${out_filename}'"

  if [ ${header} = "true" ]; then
    for i in ${!in_vcf[@]}; do
      dx download "${in_vcf[$i]}" -o in-${i}.vcf.gz
      bcftools annotate -i ${filter} -x "ID,QUAL,^INFO/AAScore,FORMAT" -Oz -o out-${i}.gz in-${i}.vcf.gz &
    done
  else
    for i in ${!in_vcf[@]}; do
      dx download "${in_vcf[$i]}" -o in-${i}.vcf.gz
      bcftools annotate -i ${filter} -x "ID,QUAL,^INFO/AAScore,FORMAT" in-${i}.vcf.gz \
        | bcftools view -H -Oz -o out-${i}.gz - &
    done
  fi
  wait

  > ${out_filename}
  for i in "${!in_vcf[@]}"; do
    rm in-${i}.vcf.gz
    cat out-${i}.gz >> ${out_filename}
    rm out-${i}.gz
  done

  filtered_bgzip_file="$(dx upload ${out_filename} --brief)"
  dx-jobutil-add-output filtered_bgzip_file "${filtered_bgzip_file}" --class=file

  echo "filter-vcfs finished on $(date)"
}
